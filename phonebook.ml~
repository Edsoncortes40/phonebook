type phone_bst =
   |EmptyLeaf
   |TreeNode of string * string * phone_bst * phone_bst

let empty_tree = EmptyLeaf

let rec add_contact tree contact number =
   match tree with
   |EmptyLeaf -> TreeNode(contact, number, EmptyLeaf, EmptyLeaf)
   |TreeNode(name, phone, left, right) -> if (contact < name) then TreeNode(name, phone, add_contact left contact number, right)
                                                              else TreeNode(name, phone, left, add_contact right contact number)

let rec list_alphabetical tree =
   match tree with
   |EmptyLeaf -> []
   |TreeNode(name, phone, left, right) -> list_alphabetical left @ [(name, phone)] @ list_alphabetical right

let rec get_contact tree contact =
   match tree with
   |EmptyLeaf -> ("Name not found", "No number for this name!")
   |TreeNode(name, phone, left, right) -> if name = contact then (name, phone)
                                                    else if contact < name then get_contact left contact
                                                    else get_contact right contact

 
